Example 1:
```
fn main() {
    let mut s = String::from("hello");
    let ref1 = &s;
    let ref2 = &ref1;
    let ref3 = &ref2;
    s = String::from("goodbye"); //#
    println!("{}", ref3.to_uppercase());
}
```

can't be compiled, for when s is borrowed by ref, the text takes modification from s, 
yet ref's lifetime is not ended, which is not allowed in Rust code. 

Example 2:
```
fn drip_drop() -> &String {
    let s = String::from("hello world!");
    return &s;
}
```

can't be compiled. this function's return type contains a borrowed value, but there is no value for it to be borrowed from

Example 3:
```
fn main() {
    let s1 = String::from("hello");
    let mut v = Vec::new();
    v.push(s1);
    let s2: String = v[0];
    println!("{}", s2);
}
```

can't be compiled. It seems Rust did't implement copy trait for the element stored in Vec<T>, neither gave mandate to transistion of ownership.