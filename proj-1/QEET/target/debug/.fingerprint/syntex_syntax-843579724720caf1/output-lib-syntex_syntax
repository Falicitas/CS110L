{"message":"expected function, tuple struct or tuple variant, found struct `ast::Name`","code":{"code":"E0423","explanation":"An identifier was used like a function name or a value was expected and the\nidentifier exists but it belongs to a different namespace.\n\nErroneous code example:\n\n```compile_fail,E0423\nstruct Foo { a: bool };\n\nlet f = Foo();\n// error: expected function, tuple struct or tuple variant, found `Foo`\n// `Foo` is a struct name, but this expression uses it like a function name\n```\n\nPlease verify you didn't misspell the name of what you actually wanted to use\nhere. Example:\n\n```\nfn Foo() -> u32 { 0 }\n\nlet f = Foo(); // ok!\n```\n\nIt is common to forget the trailing `!` on macro invocations, which would also\nyield this error:\n\n```compile_fail,E0423\nprintln(\"\");\n// error: expected function, tuple struct or tuple variant,\n// found macro `println`\n// did you mean `println!(...)`? (notice the trailing `!`)\n```\n\nAnother case where this error is emitted is when a value is expected, but\nsomething else is found:\n\n```compile_fail,E0423\npub mod a {\n    pub const I: i32 = 1;\n}\n\nfn h1() -> i32 {\n    a.I\n    //~^ ERROR expected value, found module `a`\n    // did you mean `a::I`?\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/kinesis/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/syntex_syntax-0.58.1/src/symbol.rs","byte_start":4280,"byte_end":4289,"line_start":146,"line_end":146,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"                    name: ast::Name($index),","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/kinesis/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/syntex_syntax-0.58.1/src/symbol.rs","byte_start":4901,"byte_end":7113,"line_start":165,"line_end":232,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_keywords! {","highlight_start":1,"highlight_end":20},{"text":"    // Invalid identifier","highlight_start":1,"highlight_end":26},{"text":"    (0,  Invalid,        \"\")","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Strict keywords used in the language.","highlight_start":1,"highlight_end":45},{"text":"    (1,  As,             \"as\")","highlight_start":1,"highlight_end":31},{"text":"    (2,  Box,            \"box\")","highlight_start":1,"highlight_end":32},{"text":"    (3,  Break,          \"break\")","highlight_start":1,"highlight_end":34},{"text":"    (4,  Const,          \"const\")","highlight_start":1,"highlight_end":34},{"text":"    (5,  Continue,       \"continue\")","highlight_start":1,"highlight_end":37},{"text":"    (6,  Crate,          \"crate\")","highlight_start":1,"highlight_end":34},{"text":"    (7,  Else,           \"else\")","highlight_start":1,"highlight_end":33},{"text":"    (8,  Enum,           \"enum\")","highlight_start":1,"highlight_end":33},{"text":"    (9,  Extern,         \"extern\")","highlight_start":1,"highlight_end":35},{"text":"    (10, False,          \"false\")","highlight_start":1,"highlight_end":34},{"text":"    (11, Fn,             \"fn\")","highlight_start":1,"highlight_end":31},{"text":"    (12, For,            \"for\")","highlight_start":1,"highlight_end":32},{"text":"    (13, If,             \"if\")","highlight_start":1,"highlight_end":31},{"text":"    (14, Impl,           \"impl\")","highlight_start":1,"highlight_end":33},{"text":"    (15, In,             \"in\")","highlight_start":1,"highlight_end":31},{"text":"    (16, Let,            \"let\")","highlight_start":1,"highlight_end":32},{"text":"    (17, Loop,           \"loop\")","highlight_start":1,"highlight_end":33},{"text":"    (18, Match,          \"match\")","highlight_start":1,"highlight_end":34},{"text":"    (19, Mod,            \"mod\")","highlight_start":1,"highlight_end":32},{"text":"    (20, Move,           \"move\")","highlight_start":1,"highlight_end":33},{"text":"    (21, Mut,            \"mut\")","highlight_start":1,"highlight_end":32},{"text":"    (22, Pub,            \"pub\")","highlight_start":1,"highlight_end":32},{"text":"    (23, Ref,            \"ref\")","highlight_start":1,"highlight_end":32},{"text":"    (24, Return,         \"return\")","highlight_start":1,"highlight_end":35},{"text":"    (25, SelfValue,      \"self\")","highlight_start":1,"highlight_end":33},{"text":"    (26, SelfType,       \"Self\")","highlight_start":1,"highlight_end":33},{"text":"    (27, Static,         \"static\")","highlight_start":1,"highlight_end":35},{"text":"    (28, Struct,         \"struct\")","highlight_start":1,"highlight_end":35},{"text":"    (29, Super,          \"super\")","highlight_start":1,"highlight_end":34},{"text":"    (30, Trait,          \"trait\")","highlight_start":1,"highlight_end":34},{"text":"    (31, True,           \"true\")","highlight_start":1,"highlight_end":33},{"text":"    (32, Type,           \"type\")","highlight_start":1,"highlight_end":33},{"text":"    (33, Unsafe,         \"unsafe\")","highlight_start":1,"highlight_end":35},{"text":"    (34, Use,            \"use\")","highlight_start":1,"highlight_end":32},{"text":"    (35, Where,          \"where\")","highlight_start":1,"highlight_end":34},{"text":"    (36, While,          \"while\")","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Keywords reserved for future use.","highlight_start":1,"highlight_end":41},{"text":"    (37, Abstract,       \"abstract\")","highlight_start":1,"highlight_end":37},{"text":"    (38, Alignof,        \"alignof\")","highlight_start":1,"highlight_end":36},{"text":"    (39, Become,         \"become\")","highlight_start":1,"highlight_end":35},{"text":"    (40, Do,             \"do\")","highlight_start":1,"highlight_end":31},{"text":"    (41, Final,          \"final\")","highlight_start":1,"highlight_end":34},{"text":"    (42, Macro,          \"macro\")","highlight_start":1,"highlight_end":34},{"text":"    (43, Offsetof,       \"offsetof\")","highlight_start":1,"highlight_end":37},{"text":"    (44, Override,       \"override\")","highlight_start":1,"highlight_end":37},{"text":"    (45, Priv,           \"priv\")","highlight_start":1,"highlight_end":33},{"text":"    (46, Proc,           \"proc\")","highlight_start":1,"highlight_end":33},{"text":"    (47, Pure,           \"pure\")","highlight_start":1,"highlight_end":33},{"text":"    (48, Sizeof,         \"sizeof\")","highlight_start":1,"highlight_end":35},{"text":"    (49, Typeof,         \"typeof\")","highlight_start":1,"highlight_end":35},{"text":"    (50, Unsized,        \"unsized\")","highlight_start":1,"highlight_end":36},{"text":"    (51, Virtual,        \"virtual\")","highlight_start":1,"highlight_end":36},{"text":"    (52, Yield,          \"yield\")","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Weak keywords, have special meaning only in specific contexts.","highlight_start":1,"highlight_end":70},{"text":"    (53, Default,        \"default\")","highlight_start":1,"highlight_end":36},{"text":"    (54, StaticLifetime, \"'static\")","highlight_start":1,"highlight_end":36},{"text":"    (55, Union,          \"union\")","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // A virtual keyword that resolves to the crate root when used in a lexical scope.","highlight_start":1,"highlight_end":87},{"text":"    (56, CrateRoot, \"{{root}}\")","highlight_start":1,"highlight_end":32},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_keywords!","def_site_span":{"file_name":"/home/kinesis/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/syntex_syntax-0.58.1/src/symbol.rs","byte_start":3668,"byte_end":3697,"line_start":128,"line_end":128,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! declare_keywords {(","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0423]\u001b[0m\u001b[0m\u001b[1m: expected function, tuple struct or tuple variant, found struct `ast::Name`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kinesis/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/syntex_syntax-0.58.1/src/symbol.rs:146:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                    name: ast::Name($index),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_keywords! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // Invalid identifier\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (0,  Invalid,        \"\")\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (56, CrateRoot, \"{{root}}\")\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0423`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0423`.\u001b[0m\n"}
